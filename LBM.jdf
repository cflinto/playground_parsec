extern "C" %{

/**
 * This second example shows how to create a simple jdf that has only one single task.
 *    JDF syntax
 *    parsec_JDFNAME_New()
 *    parsec_context_add_taskpool()
 *    parsec_data_collection_init()
 *
 * Can play with the HelloWorld bounds to show embarissingly parallel algorithm.
 *
 * @version 3.0
 * @email parsec-users@icl.utk.edu
 *
 */

/* Paste code to allocate a matrix in desc if cond_init is true */
#define PASTE_CODE_ALLOCATE_MATRIX(DC, COND, TYPE, INIT_PARAMS)                                     \
    TYPE##_t *DC = (TYPE##_t*)malloc(sizeof(TYPE##_t)*PROBLEM_DC);                                                                        \
    if(COND) {                                                                                      \
        for(int i=0;i<PROBLEM_DC;++i)                                                               \
        {                                                                                           \
            TYPE##_init INIT_PARAMS;                                                                \
            DC[i].grid = parsec_data_allocate((size_t)DC[i].nb_local_tiles *                              \
                                            (size_t)DC[i].bsiz *                                       \
                                            (size_t)parsec_datadist_getsizeoftype(DC[i].mtype));       \
            assert(DC[i].grid != NULL);                                                                \
            parsec_data_collection_set_key((parsec_data_collection_t*)&DC[i], #DC);                    \
        }                                                                                           \
    }

#include <math.h>
#include "parsec.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "parsec/data_dist/multidimensional_grid.h"

#include "cublas_v2.h"

#define PROBLEM_SIZE_X (128)
#define PROBLEM_SIZE_Y (128)
#define PROBLEM_SIZE_Z (128)

#define PROBLEM_D 4
#define PROBLEM_C 9

#define PROBLEM_DC (PROBLEM_D*PROBLEM_C)

#define TILE_SIZE_X (32)
#define TILE_SIZE_Y (32)
#define TILE_SIZE_Z (32)

#define SUBGRID_NUMBER_X ((PROBLEM_SIZE_X)/(TILE_SIZE_X))
#define SUBGRID_NUMBER_Y ((PROBLEM_SIZE_Y)/(TILE_SIZE_Y))
#define SUBGRID_NUMBER_Z ((PROBLEM_SIZE_Z)/(TILE_SIZE_Z))


typedef cublasStatus_t (*cublas_dgemm_v2_t) ( cublasHandle_t handle,
                            cublasOperation_t transa, cublasOperation_t transb,
                            int m, int n, int k,
                            const double *alpha,
                            const double *A, int lda,
                            const double *B, int ldb,
                            const double *beta,
                            double       *C, int ldc);


#if defined(PARSEC_HAVE_CUDA)
static void destruct_cublas_handle(void *p)
{
    cublasHandle_t handle = (cublasHandle_t)p;
    cublasStatus_t status;
    if(NULL != handle) {
        status = cublasDestroy(handle);
        assert(status == CUBLAS_STATUS_SUCCESS);
        (void)status;
    }
}

static void *create_cublas_handle(void *obj, void *p)
{
    cublasHandle_t handle;
    cublasStatus_t status;
    parsec_cuda_exec_stream_t *stream = (parsec_cuda_exec_stream_t *)obj;
    (void)p;
    /* No need to call cudaSetDevice, as this has been done by PaRSEC before calling the task body */
    status = cublasCreate(&handle);
    assert(CUBLAS_STATUS_SUCCESS == status);
    status = cublasSetStream(handle, stream->cuda_stream);
    assert(CUBLAS_STATUS_SUCCESS == status);
    (void)status;
    return (void*)handle;
}
#endif

static void destroy_cublas_handle(void *_h, void *_n)
{
#if defined(PARSEC_HAVE_CUDA)
    cublasHandle_t cublas_handle = (cublasHandle_t)_h;
    cublasDestroy_v2(cublas_handle);
#endif
    (void)_n;
    (void)_h;
}


%}


descGridDC  [ type="parsec_multidimensional_grid_t*" array_size=PROBLEM_DC ]


rank   [ type="int" ]
nodes   [ type="int" ]
subgrid_number_x   [ type="int" ] // row number
subgrid_number_y   [ type="int" ] // column number
subgrid_number_z   [ type="int" ]
tile_size_x   [ type="int" ]
tile_size_y   [ type="int" ]
tile_size_z   [ type="int" ]
conservatives_number   [ type="int" ]
directions_number   [ type="int" ]
CuHI              [type = "parsec_info_id_t"]


FillGrid(x, y, z, dc)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
dc = 0 .. conservatives_number*directions_number-1

: descGridDC[dc](x, y, z)

RW ANJNXHB <- descGridDC[dc](x, y, z)
    -> ACDCZ22222 LBM(x, y, z, dc)

BODY
    double *grid = ANJNXHB;

    for(int i=0;i<TILE_SIZE_X*TILE_SIZE_Y*TILE_SIZE_Z;++i)
    {
        grid[i] = 1;
    }
END


LBM(x, y, z, dc)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
dc = 0 .. conservatives_number*directions_number-1

: descGridDC[dc](x, y, z)

RW ACDCZ22222 <- ANJNXHB FillGrid(x, y, z, dc)
    -> descGridDC[dc](x, y, z)

BODY [type=CUDA]

    // do nothing

    printf("[Process %d] kernel LBM (%d, %d, %d) is called\n", rank, x, y, z);
END

/*
BODY
    double *grid = A;

    printf("[Process %d] kernel LBM (%d, %d, %d) is called, grid=%p\n", rank, x, y, z, grid);

    for(int i=0;i<TILE_SIZE_X*TILE_SIZE_Y*TILE_SIZE_Z;++i)
    {
        grid[i] += 1;
    }
END
*/



extern "C" %{

int main(int argc, char *argv[])
{
    parsec_context_t* parsec;
    int rc;
    int rank, world;
    parsec_LBM_taskpool_t *tp;
    //int mycounter;

    parsec_arena_datatype_t adt;
    parsec_datatype_t otype;

#if defined(PARSEC_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_SERIALIZED, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    world = 1;
    rank = 0;
#endif

    parsec = parsec_init(-1, &argc, &argv);

    int nodes = world;

    #if defined(PARSEC_HAVE_CUDA)
    parsec_info_id_t CuHI = parsec_info_register(&parsec_per_stream_infos, "CUBLAS::HANDLE",
                                                 destroy_cublas_handle, NULL,
                                                 create_cublas_handle, NULL,
                                                 NULL);
    assert(CuHI != -1);
#else
    int CuHI = -1;
#endif

    PASTE_CODE_ALLOCATE_MATRIX(descGridDC, true, parsec_multidimensional_grid, (
                               &descGridDC[i],
                               PARSEC_MATRIX_DOUBLE,
                               nodes, rank,
                               3,
                               SUBGRID_NUMBER_X, SUBGRID_NUMBER_Y,SUBGRID_NUMBER_Z,
                               TILE_SIZE_X, TILE_SIZE_Y, TILE_SIZE_Z,
                               1, 1, 1)
                            );

    parsec_translate_matrix_type(PARSEC_MATRIX_DOUBLE, &otype);
    parsec_add2arena_rect(&adt, otype,
                                 TILE_SIZE_X, TILE_SIZE_Y*TILE_SIZE_Z*PROBLEM_C*PROBLEM_D, TILE_SIZE_X);

    tp = (parsec_LBM_taskpool_t*)parsec_LBM_new(
                                descGridDC,
                                rank, world,
                                SUBGRID_NUMBER_X, SUBGRID_NUMBER_Y, SUBGRID_NUMBER_Z,
                                TILE_SIZE_X, TILE_SIZE_Y, TILE_SIZE_Z, PROBLEM_C, PROBLEM_D,
                                CuHI);

    assert( NULL != tp );
    tp->arenas_datatypes[PARSEC_LBM_DEFAULT_ADT_IDX] = adt;
    PARSEC_OBJ_RETAIN(adt.arena);

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");
    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");
    rc = parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

printf("final : %f\n", ((double*)(descGridDC[0].grid))[0]);


    parsec_taskpool_free(&tp->super);

    for(int i=0;i<PROBLEM_DC;++i)
    {
        parsec_data_free(descGridDC[i].grid);
        parsec_grid_destroy(&descGridDC[i]);
    }

    parsec_fini(&parsec);
#if defined(PARSEC_HAVE_MPI)
    MPI_Finalize();
#endif

    return 0;
}

%}