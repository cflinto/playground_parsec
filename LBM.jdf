extern "C" %{

/**
 * This second example shows how to create a simple jdf that has only one single task.
 *    JDF syntax
 *    parsec_JDFNAME_New()
 *    parsec_context_add_taskpool()
 *    parsec_data_collection_init()
 *
 * Can play with the HelloWorld bounds to show embarissingly parallel algorithm.
 *
 * @version 3.0
 * @email parsec-users@icl.utk.edu
 *
 */

#define gpuErrchk(ans)                        \
	{                                         \
		gpuAssert((ans), __FILE__, __LINE__, true); \
	}
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort)
{
	if (code != cudaSuccess)
	{
		fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
		if (abort)
			exit(code);
	}
}

#include <stdio.h>
#include <sys/time.h>
#include <math.h>

#include "parsec.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "parsec/data_dist/multidimensional_grid.h"

#include "cublas_v2.h"

// LBM defines

#define EPSILON 0.000000001

#define CFL 0.45
#define ALPHA 0.9
#define BETA 0.9


// HPC defines

#define DIMENSIONS_NUMBER 2


#define MAX_SUBGRIDS 256

#define PROBLEM_SIZE_X (8)
#define PROBLEM_SIZE_Y (8)
#define PROBLEM_SIZE_Z (8)

typedef struct Grid
{
    // Difference between the logical size, the true size, and the owned size in 1D:
    // Subgrid:
    // OOOAAAAAAAAASOOO

    // Terminology:
    // O = overlap (= ghost cells = halo)
    // A = owned
    // S = shared
    // true size = O + A + S
    // logical size = A + S
    // owned size = A
    // In this case (overlap=3) and with a basic 2-direction scheme (left/right):
    // We can perform 3 consecutive steps (because we have 3 ghost cells)
    // After the 3 steps, A and S are set to the right values, but O is not.
    // The overlap must, therefore, be synchronized with the neighbors at this point in time.

    // Conceptually, the grid is a 5D array: (x, y, z, c, d) of size (size[0], size[1], size[2], conservativesNumber, directionsNumber)
	int size[DIMENSIONS_NUMBER];
    int conservativesNumber;
    int directionsNumber;

	int subgridNumber[DIMENSIONS_NUMBER];
	int subgridOwnedSize[DIMENSIONS_NUMBER]; // cells owned uniquely by this subgrid
	int subgridLogicalSize[DIMENSIONS_NUMBER]; // cells that need computation on this subgrid (includes cells that share the same computation)
	int subgridTrueSize[DIMENSIONS_NUMBER]; // all the cells of the subgrid (including ghost cells = halo = overlap)
    int sharedLayers[DIMENSIONS_NUMBER][2]; // number of values that are shared with the neighbor [dim][dir] (shared meaning that the values are computed twice and not exchanged)
	int overlapSize[DIMENSIONS_NUMBER]; // depth of the overlap on each dimension


    // Conceptually, the grid is a 5D array: (x, y, z, c, d)

	int cellsPerSubgrid;
	int subgridsNumber;
	int currentSubgrid;

	double mass[MAX_SUBGRIDS];

    // physical coords of the problem, used by the physical model
	double physicalMinCoords[DIMENSIONS_NUMBER];
	double physicalSize[DIMENSIONS_NUMBER];

    parsec_multidimensional_grid_t desc;
} Grid;

Grid newGrid(int rank, int nodes)
{
	Grid grid;

	grid.size[0] = PROBLEM_SIZE_X;
	grid.size[1] = PROBLEM_SIZE_Y;
    grid.conservativesNumber = 1;
    grid.directionsNumber = 3;

	grid.subgridNumber[0] = 2;
	grid.subgridNumber[1] = 2;
	grid.subgridOwnedSize[0] = grid.size[0] / grid.subgridNumber[0];
	grid.subgridOwnedSize[1] = grid.size[1] / grid.subgridNumber[1];

    grid.sharedLayers[0][0] = 0;
    grid.sharedLayers[0][1] = 0;
    grid.sharedLayers[1][0] = 0;
    grid.sharedLayers[1][1] = 0;

    for(int d=0;d<DIMENSIONS_NUMBER;++d)
    {
        grid.subgridLogicalSize[d] = grid.subgridOwnedSize[d] + grid.sharedLayers[d][0] + grid.sharedLayers[d][1];
    }


	grid.overlapSize[0] = 32;
	grid.overlapSize[1] = 1;

	grid.currentSubgrid = 0;

	grid.physicalMinCoords[0] = -1;
	grid.physicalMinCoords[1] = -1;
	grid.physicalSize[0] = 2;
	grid.physicalSize[1] = 2;

	grid.subgridTrueSize[0] = grid.subgridLogicalSize[0] + 2 * grid.overlapSize[0];
	grid.subgridTrueSize[1] = grid.subgridLogicalSize[1] + 2 * grid.overlapSize[1];
	grid.cellsPerSubgrid = (grid.subgridTrueSize[0]) * (grid.subgridTrueSize[1]);
	grid.subgridsNumber = grid.subgridNumber[0] * grid.subgridNumber[1];

    for(int d=0;d<DIMENSIONS_NUMBER;++d)
    {
        assert(grid.size[d] % grid.subgridOwnedSize[d] == 0);
        assert(grid.subgridNumber[d]*grid.subgridOwnedSize[d] == grid.size[d]);
        assert(grid.subgridOwnedSize[d] <= grid.subgridLogicalSize[d]);
        assert(grid.subgridLogicalSize[d] <= grid.subgridTrueSize[d]);
    }

    // Initialize the grid
    parsec_multidimensional_grid_init(&grid.desc,
                            PARSEC_MATRIX_DOUBLE,
                            nodes, rank,
                            DIMENSIONS_NUMBER+2, DIMENSIONS_NUMBER,
                            grid.subgridNumber[0], grid.subgridNumber[1], grid.conservativesNumber, grid.directionsNumber,
                            grid.subgridTrueSize[0], grid.subgridTrueSize[1],
                            1, 1, 1, 1); // TODO, maybe the stencil should be NxNxgrid.conservativesNumberxgrid.directionsNumber
    grid.desc.grid = parsec_data_allocate((size_t)grid.desc.nb_local_tiles *
                                    (size_t)grid.desc.bsiz *
                                    (size_t)parsec_datadist_getsizeoftype(grid.desc.mtype));
    assert(grid.desc.grid != NULL);

    parsec_data_collection_set_key((parsec_data_collection_t*)&grid.desc, "grid.desc[");
    
	return grid;
}


typedef cublasStatus_t (*cublas_dgemm_v2_t) ( cublasHandle_t handle,
                            cublasOperation_t transa, cublasOperation_t transb,
                            int m, int n, int k,
                            const double *alpha,
                            const double *A, int lda,
                            const double *B, int ldb,
                            const double *beta,
                            double       *C, int ldc);


#if defined(PARSEC_HAVE_CUDA)
static void destruct_cublas_handle(void *p)
{
    cublasHandle_t handle = (cublasHandle_t)p;
    cublasStatus_t status;
    if(NULL != handle) {
        status = cublasDestroy(handle);
        assert(status == CUBLAS_STATUS_SUCCESS);
        (void)status;
    }
}

static void *create_cublas_handle(void *obj, void *p)
{
    cublasHandle_t handle;
    cublasStatus_t status;
    parsec_cuda_exec_stream_t *stream = (parsec_cuda_exec_stream_t *)obj;
    (void)p;
    /* No need to call cudaSetDevice, as this has been done by PaRSEC before calling the task body */
    status = cublasCreate(&handle);
    assert(CUBLAS_STATUS_SUCCESS == status);
    status = cublasSetStream(handle, stream->cuda_stream);
    assert(CUBLAS_STATUS_SUCCESS == status);
    (void)status;
    return (void*)handle;
}
#endif

static void destroy_cublas_handle(void *_h, void *_n)
{
#if defined(PARSEC_HAVE_CUDA)
    cublasHandle_t cublas_handle = (cublasHandle_t)_h;
    cublasDestroy_v2(cublas_handle);
#endif
    (void)_n;
    (void)_h;
}

//int cd;

%}


descGridDC  [ type="parsec_multidimensional_grid_t*" ]
gridParameters       [ type="Grid" ]


rank   [ type="int" ]
nodes   [ type="int" ]
subgrid_number_x   [ type="int" ]
subgrid_number_y   [ type="int" ]
subgrid_size_x   [ type="int" ]
subgrid_size_y   [ type="int" ]
conservatives_number   [ type="int" ]
directions_number   [ type="int" ]
overlap_x   [ type="int" ]
overlap_y   [ type="int" ]
number_of_steps   [ type="int" ]
CuHI              [type = "parsec_info_id_t"]


FillGrid(subgrid_x, subgrid_y, c, d)

subgrid_x = 0 .. subgrid_number_x-1
subgrid_y = 0 .. subgrid_number_y-1
c = 0 .. conservatives_number-1
d = 0 .. directions_number-1

: descGridDC(subgrid_x, subgrid_y, c, d)


RW SUBGRID_CD <- descGridDC(subgrid_x, subgrid_y, c, d)
    -> SUBGRID_FROM[cd = c+d*conservatives_number] LBM_STEP(subgrid_x, subgrid_y, 0)


BODY
    double *subgrid = SUBGRID_CD;

    for(int i=0;i<subgrid_size_x*subgrid_size_y;++i)
    {
        subgrid[i] = 0; // TODO
    }

    fprintf(stderr, "FillGrid: %d %d %d %d (subgrid=%p)\n", subgrid_x, subgrid_y, c, d, subgrid);
END


LBM_STEP(subgrid_x, subgrid_y, s)

subgrid_x = 0 .. subgrid_number_x-1
subgrid_y = 0 .. subgrid_number_y-1
s = 0 .. number_of_steps-1

: descGridDC(subgrid_x, subgrid_y, 0, 0)

READ SUBGRID_FROM[cd = 0..conservatives_number*directions_number-1]
    <- (s==0)
        ? SUBGRID_CD FillGrid(subgrid_x, subgrid_y, cd%conservatives_number, cd/conservatives_number)
        : SUBGRID_TO[cd_it=cd] LBM_STEP(subgrid_x, subgrid_y, s-1)
        
WRITE SUBGRID_TO[cd = 0..conservatives_number*directions_number-1]
    -> (s==number_of_steps-1)
        ? SUBGRID_CD WriteBack(subgrid_x, subgrid_y, cd%conservatives_number, cd/conservatives_number)
        : SUBGRID_FROM[cd_it=cd] LBM_STEP(subgrid_x, subgrid_y, s+1)

// dir*(subgrid_number_y-1-subgrid_y)+(1-dir)*subgrid_y > 0 translates this:
// if dir==0 then subgrid_y>0
// if dir==1 then subgrid_number_y-1<subgrid_y
// WRITE VERTICAL_BORDERS_OUT[dir = 0..1]
//     //-> (s!=(number_of_steps-1) && (dir*(subgrid_number_y-1-subgrid_y)+(1-dir)*subgrid_y > 0))
//     -> (0)
//         ? VERTICAL_BORDERS_IN[dir_it=dir] LBM_STEP(subgrid_x, subgrid_y+dir*2-1, s+1)

// // by replacing (dir) with (1-dir) we have the opposite relation
// READ VERTICAL_BORDERS_IN[dir = 0..1]
//    // <- (s!=0 && ((1-dir)*(subgrid_number_y-1-subgrid_y)+(dir)*subgrid_y > 0))
//     <- (0)
//         ? VERTICAL_BORDERS_OUT[dir_it=dir] LBM_STEP(subgrid_x, subgrid_y-dir*2-1, s-1)
//         : NULL

// BODY [type=CUDA]
//     double *subgrid[gridParameters.conservativesNumber][gridParameters.directionsNumber];
//     subgrid[0][0] = GRID_CD[0];
//     subgrid[1][0] = GRID_CD[1];
//     subgrid[2][0] = GRID_CD[2];
//     subgrid[0][1] = GRID_CD[3];
//     subgrid[1][1] = GRID_CD[4];
//     subgrid[2][1] = GRID_CD[5];

//     printf("[Process %d] kernel LBM_STEP GPU (%d %d %d %d) grid|0][0]=%p, grid[1][0]=%p, grid[2][0]=%p, grid[0][1]=%p, grid[1][1]=%p, grid[2][1]=%p\n",
//                 rank, x, y, z, s, subgrid[0][0], subgrid[1][0], subgrid[2][0], subgrid[0][1], subgrid[1][1], subgrid[2][1]);

//     /*for(int i=0;i<tile_size_x*tile_size_y*tile_size_z;++i)
//     {
//         for(int cd=0;cd<gridParameters.conservativesNumber*gridParameters.directionsNumber;++cd)
//         {
//             double *mat = GRID_CD[cd];
//             mat[i] += 1;
//         }
//     }*/
// END

BODY
    double *subgrid_FROM_CD[gridParameters.conservativesNumber][gridParameters.directionsNumber];
    double *subgrid_TO_CD[gridParameters.conservativesNumber][gridParameters.directionsNumber];

    // // parametrized version:
    // subgrid[0][0] = GRID_CD[0];
    // subgrid[1][0] = GRID_CD[1];
    // subgrid[2][0] = GRID_CD[2];
    // subgrid[2][0] = GRID_CD[2];
    // subgrid[0][1] = GRID_CD[3];
    // subgrid[1][1] = GRID_CD[4];
    // subgrid[2][1] = GRID_CD[5];

    for(int cd=0;cd<gridParameters.conservativesNumber*gridParameters.directionsNumber;++cd)
    {
        int c = cd / gridParameters.directionsNumber;
        int d = cd % gridParameters.directionsNumber;
        subgrid_FROM_CD[c][d] = SUBGRID_FROM[cd];
        subgrid_TO_CD[c][d] = SUBGRID_TO[cd];
    }

    fprintf(stderr, "[Process %d] kernel LBM_STEP CPU (%d %d %d)\n",
               rank, subgrid_x, subgrid_y, s);

    for(int i=0;i<subgrid_size_x*subgrid_size_y;++i)
    {
        for(int cd=0;cd<gridParameters.conservativesNumber*gridParameters.directionsNumber;++cd)
        {
            double *mat = subgrid_FROM_CD[cd/gridParameters.directionsNumber][cd%gridParameters.directionsNumber];
            mat[i] += 1;
            subgrid_TO_CD[cd/gridParameters.directionsNumber][cd%gridParameters.directionsNumber][i] = mat[i];
        }
    }

END

WriteBack(subgrid_x, subgrid_y, c, d)

subgrid_x = 0 .. subgrid_number_x-1
subgrid_y = 0 .. subgrid_number_y-1
c = 0 .. conservatives_number-1
d = 0 .. directions_number-1

: descGridDC(subgrid_x, subgrid_y, c, d)

RW SUBGRID_CD <- SUBGRID_TO[cd = c+d*conservatives_number] LBM_STEP(subgrid_x, subgrid_y, number_of_steps-1)
    -> descGridDC(subgrid_x, subgrid_y, c, d)

// RW FINAL_GRID <- (c==0 && d==0) ? GRID_CD_0_0 LBM_STEP(x, y, z, number_of_steps-1)
//     <- (c==1 && d==0) ? GRID_CD_1_0 LBM_STEP(x, y, z, number_of_steps-1)
//     <- (c==2 && d==0) ? GRID_CD_2_0 LBM_STEP(x, y, z, number_of_steps-1)
//     <- (c==0 && d==1) ? GRID_CD_0_1 LBM_STEP(x, y, z, number_of_steps-1)
//     <- (c==1 && d==1) ? GRID_CD_1_1 LBM_STEP(x, y, z, number_of_steps-1)
//     <- (c==2 && d==1) ? GRID_CD_2_1 LBM_STEP(x, y, z, number_of_steps-1)
//     -> descGridDC(x, y, z, c, d)


BODY
    double *mat = (double*)(SUBGRID_CD);

    fprintf(stderr, "[Process %d] kernel WRITE_BACK (%d %d %d %d) (first value = %f)\n", rank, subgrid_x, subgrid_y, c, d, mat[0]);
END

extern "C" %{

int main(int argc, char *argv[])
{
    parsec_context_t* parsec;
    int rc;
    int rank, world;
    parsec_LBM_taskpool_t *tp;
    //int mycounter;

    struct timeval begin_initialization, end_initialization, end_execution;

    parsec_arena_datatype_t adt;
    parsec_datatype_t otype;

#if defined(PARSEC_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_SERIALIZED, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    world = 1;
    rank = 0;
#endif

    // LBM parameters
    Grid grid = newGrid(rank, world);

    double delta_x = grid.physicalSize[0] / (double)grid.size[0];
    double dt = CFL * delta_x / (ALPHA > BETA ? ALPHA : BETA);

    double tmax = 1;
    int number_of_steps = (int)((tmax-EPSILON) / dt) + 1;
    number_of_steps = 3;

    parsec = parsec_init(-1, &argc, &argv);

    int nodes = world;

#if defined(PARSEC_HAVE_CUDA)
    parsec_info_id_t CuHI = parsec_info_register(&parsec_per_stream_infos, "CUBLAS::HANDLE",
                                                 destroy_cublas_handle, NULL,
                                                 create_cublas_handle, NULL,
                                                 NULL);
    assert(CuHI != -1);
#else
    int CuHI = -1;
#endif

    parsec_translate_matrix_type(PARSEC_MATRIX_DOUBLE, &otype);
    parsec_add2arena_rect(&adt, otype,
                                 grid.subgridTrueSize[0], grid.subgridTrueSize[1], grid.subgridTrueSize[0]);

    gettimeofday(&begin_initialization, 0);

    tp = (parsec_LBM_taskpool_t*)parsec_LBM_new(
                                &grid.desc, grid,
                                rank, world,
                                grid.subgridNumber[0], grid.subgridNumber[1],
                                grid.subgridTrueSize[0], grid.subgridTrueSize[1], grid.conservativesNumber, grid.directionsNumber,

                                grid.overlapSize[0], grid.overlapSize[1],
                                number_of_steps,
                                CuHI);

    assert( NULL != tp );
    tp->arenas_datatypes[PARSEC_LBM_DEFAULT_ADT_IDX] = adt;
    PARSEC_OBJ_RETAIN(adt.arena);

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");
    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");
    gettimeofday(&end_initialization, 0);
    rc = parsec_context_wait(parsec);
    gettimeofday(&end_execution, 0);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    if( rank == 0 ) {
        for(int cd=0; cd<grid.conservativesNumber*grid.directionsNumber; cd++) {
            double *mat = &(((double*)grid.desc.grid)[cd*grid.subgridNumber[0]*grid.subgridNumber[1]*grid.subgridNumber[2]]);
            printf("for cd=%d, final : %f\n", cd, *mat);
        }
    }


    parsec_taskpool_free(&tp->super);

    //for(int i=0;i<grid.conservativesNumber*grid.directionsNumber;++i)
    int i=0;
    {
        parsec_data_free(grid.desc.grid);
        parsec_grid_destroy(&grid.desc);
    }

    long seconds;
    long microseconds;
    double elapsed;

    seconds = end_execution.tv_sec - end_initialization.tv_sec;
    microseconds = end_execution.tv_usec - end_initialization.tv_usec;
    elapsed = seconds + microseconds*1e-6;
    printf("execution_time: %f\n", elapsed);
    seconds = end_initialization.tv_sec - begin_initialization.tv_sec;
    microseconds = end_initialization.tv_usec - begin_initialization.tv_usec;
    elapsed = seconds + microseconds*1e-6;
    printf("initialization_time: %f\n", elapsed);
    seconds = end_execution.tv_sec - begin_initialization.tv_sec;
    microseconds = end_execution.tv_usec - begin_initialization.tv_usec;
    elapsed = seconds + microseconds*1e-6;
    printf("total_time: %f\n", elapsed);

    parsec_fini(&parsec);
#if defined(PARSEC_HAVE_MPI)
    MPI_Finalize();
#endif

    return 0;
}

%}