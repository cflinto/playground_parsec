extern "C" %{

/**
 * This second example shows how to create a simple jdf that has only one single task.
 *    JDF syntax
 *    parsec_JDFNAME_New()
 *    parsec_context_add_taskpool()
 *    parsec_data_collection_init()
 *
 * Can play with the HelloWorld bounds to show embarissingly parallel algorithm.
 *
 * @version 3.0
 * @email parsec-users@icl.utk.edu
 *
 */

#define gpuErrchk(ans)                        \
	{                                         \
		gpuAssert((ans), __FILE__, __LINE__, true); \
	}
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort)
{
	if (code != cudaSuccess)
	{
		fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
		if (abort)
			exit(code);
	}
}

#include <math.h>
#include "parsec.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "parsec/data_dist/multidimensional_grid.h"

#include "cublas_v2.h"

// LBM defines

#define EPSILON 0.000000001

#define CFL 0.45
#define ALPHA 0.9
#define BETA 0.9


// HPC defines

#define DIMENSIONS_NUMBER 3


#define MAX_SUBGRIDS 256

#define PROBLEM_SIZE_X (64)
#define PROBLEM_SIZE_Y (64)
#define PROBLEM_SIZE_Z (64)

#define PROBLEM_D 2
#define PROBLEM_C 3

#define PROBLEM_DC (PROBLEM_D*PROBLEM_C)

#define TILE_SIZE_X (64)
#define TILE_SIZE_Y (64)
#define TILE_SIZE_Z (64)

#define OVERLAP_X (1)
#define OVERLAP_Y (2)
#define OVERLAP_Z (3)

#define SUBGRID_NUMBER_X ((PROBLEM_SIZE_X)/(TILE_SIZE_X))
#define SUBGRID_NUMBER_Y ((PROBLEM_SIZE_Y)/(TILE_SIZE_Y))
#define SUBGRID_NUMBER_Z ((PROBLEM_SIZE_Z)/(TILE_SIZE_Z))

typedef struct Grid
{
	int size[3];
	int subspaces[3];
	int subgridLogicSizeCompressed[3];
	int subgridLogicSize[3];
	int subgridTrueSize[3];
	size_t subgridCompressedSize[MAX_SUBGRIDS];
	size_t subgridTempSize[MAX_SUBGRIDS];
	int cellsPerSubgrid;
	int subgridsNumber;
	int currentSubgrid;
	int overlap;
	double mass[MAX_SUBGRIDS];
	double physicalMinCoords[3];
	double physicalSize[3];

    parsec_multidimensional_grid_t *desc;
} Grid;

Grid newGrid(int rank, int nodes)
{
	Grid grid;

	grid.size[0] = PROBLEM_SIZE_X;
	grid.size[1] = PROBLEM_SIZE_Y;
	grid.size[2] = PROBLEM_SIZE_Z;
	grid.subspaces[0] = 2;
	grid.subspaces[1] = 2;
	grid.subspaces[2] = 2;
	grid.subgridLogicSize[0] = PROBLEM_SIZE_X / grid.subspaces[0] + 1;
	grid.subgridLogicSize[1] = PROBLEM_SIZE_Y / grid.subspaces[1] + 1;
	grid.subgridLogicSize[2] = PROBLEM_SIZE_Z / grid.subspaces[2] + 1;
	grid.overlap = 1;

	grid.currentSubgrid = 0;

	grid.physicalMinCoords[0] = -1;
	grid.physicalMinCoords[1] = -1;
	grid.physicalMinCoords[2] = -1;
	grid.physicalSize[0] = 2;
	grid.physicalSize[1] = 2;
	grid.physicalSize[2] = 2;

	grid.subgridLogicSizeCompressed[0] = grid.subgridLogicSize[0];
	grid.subgridLogicSizeCompressed[1] = grid.subgridLogicSize[1];
	grid.subgridLogicSizeCompressed[2] = grid.subgridLogicSize[2];
	grid.subgridTrueSize[0] = grid.subgridLogicSize[0] + 2 * grid.overlap;
	grid.subgridTrueSize[1] = grid.subgridLogicSize[1] + 2 * grid.overlap;
	grid.subgridTrueSize[2] = grid.subgridLogicSize[2] + 2 * grid.overlap;
	grid.cellsPerSubgrid = (grid.subgridTrueSize[0]) * (grid.subgridTrueSize[1]) * (grid.subgridTrueSize[2]);
	grid.subgridsNumber = grid.subspaces[0] * grid.subspaces[1] * grid.subspaces[2];

	for (int i = 0; i < grid.subgridsNumber; ++i)
	{
		// init to a random value
		grid.subgridCompressedSize[i] = 0;
		grid.subgridTempSize[i] = 0;
	}

    grid.desc = (parsec_multidimensional_grid_t*)malloc(sizeof(parsec_multidimensional_grid_t)*PROBLEM_DC);
    assert(grid.desc != NULL);

    for(int i=0;i<PROBLEM_DC;++i)
    {
        parsec_multidimensional_grid_init(&grid.desc[i],
                               PARSEC_MATRIX_DOUBLE,
                               nodes, rank,
                               5,
                               SUBGRID_NUMBER_X, SUBGRID_NUMBER_Y, SUBGRID_NUMBER_Z, PROBLEM_C, PROBLEM_D,
                               TILE_SIZE_X, TILE_SIZE_Y, TILE_SIZE_Z, 1, 1,
                               OVERLAP_X, OVERLAP_Y, OVERLAP_Z,
                               1, 1, 1, 1, 1);
        grid.desc[i].grid = parsec_data_allocate((size_t)grid.desc[i].nb_local_tiles *
                                        (size_t)grid.desc[i].bsiz *
                                        (size_t)parsec_datadist_getsizeoftype(grid.desc[i].mtype));
        assert(grid.desc[i].grid != NULL);
        parsec_data_collection_set_key((parsec_data_collection_t*)&grid.desc[i], "grid.desc");
    }

	return grid;
}


typedef cublasStatus_t (*cublas_dgemm_v2_t) ( cublasHandle_t handle,
                            cublasOperation_t transa, cublasOperation_t transb,
                            int m, int n, int k,
                            const double *alpha,
                            const double *A, int lda,
                            const double *B, int ldb,
                            const double *beta,
                            double       *C, int ldc);


#if defined(PARSEC_HAVE_CUDA)
static void destruct_cublas_handle(void *p)
{
    cublasHandle_t handle = (cublasHandle_t)p;
    cublasStatus_t status;
    if(NULL != handle) {
        status = cublasDestroy(handle);
        assert(status == CUBLAS_STATUS_SUCCESS);
        (void)status;
    }
}

static void *create_cublas_handle(void *obj, void *p)
{
    cublasHandle_t handle;
    cublasStatus_t status;
    parsec_cuda_exec_stream_t *stream = (parsec_cuda_exec_stream_t *)obj;
    (void)p;
    /* No need to call cudaSetDevice, as this has been done by PaRSEC before calling the task body */
    status = cublasCreate(&handle);
    assert(CUBLAS_STATUS_SUCCESS == status);
    status = cublasSetStream(handle, stream->cuda_stream);
    assert(CUBLAS_STATUS_SUCCESS == status);
    (void)status;
    return (void*)handle;
}
#endif

static void destroy_cublas_handle(void *_h, void *_n)
{
#if defined(PARSEC_HAVE_CUDA)
    cublasHandle_t cublas_handle = (cublasHandle_t)_h;
    cublasDestroy_v2(cublas_handle);
#endif
    (void)_n;
    (void)_h;
}


%}


descGridDC  [ type="parsec_multidimensional_grid_t*" ]


rank   [ type="int" ]
nodes   [ type="int" ]
subgrid_number_x   [ type="int" ] // row number
subgrid_number_y   [ type="int" ] // column number
subgrid_number_z   [ type="int" ]
tile_size_x   [ type="int" ]
tile_size_y   [ type="int" ]
tile_size_z   [ type="int" ]
conservatives_number   [ type="int" ]
directions_number   [ type="int" ]
overlap_x   [ type="int" ]
overlap_y   [ type="int" ]
overlap_z   [ type="int" ]
number_of_steps   [ type="int" ]
CuHI              [type = "parsec_info_id_t"]


FillGrid(x, y, z, c, d)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
c = 0 .. conservatives_number-1
d = 0 .. directions_number-1

: descGridDC(x, y, z, c, d)

RW INITIAL_GRID <- descGridDC(x, y, z, c, d)
    -> (c==0 && d==0) ? GRID_CD_0_0 LBM_STEP(x, y, z, 0)
    -> (c==1 && d==0) ? GRID_CD_1_0 LBM_STEP(x, y, z, 0)
    -> (c==2 && d==0) ? GRID_CD_2_0 LBM_STEP(x, y, z, 0)
    -> (c==0 && d==1) ? GRID_CD_0_1 LBM_STEP(x, y, z, 0)
    -> (c==1 && d==1) ? GRID_CD_1_1 LBM_STEP(x, y, z, 0)
    -> (c==2 && d==1) ? GRID_CD_2_1 LBM_STEP(x, y, z, 0)

BODY
    double *grid = INITIAL_GRID;

    for(int i=0;i<TILE_SIZE_X*TILE_SIZE_Y*TILE_SIZE_Z;++i)
    {
        grid[i] = 1;
    }

    printf("FillGrid: %d %d %d %d %d (grid=%p)\n", x, y, z, c, d, grid);
END


LBM_STEP(x, y, z, s)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
s = 0 .. number_of_steps-1

: descGridDC(x, y, z, 0, 0)

RW GRID_CD_0_0 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 0, 0) : GRID_TO Exchange(x, y, z, s-1, 0, 0, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 0, 0) : GRID_TO Exchange(x, y, z, s, 0, 0, 0, 0)

RW GRID_CD_1_0 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 1, 0) : GRID_TO Exchange(x, y, z, s-1, 1, 0, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 1, 0) : GRID_TO Exchange(x, y, z, s, 1, 0, 0, 0)

RW GRID_CD_2_0 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 2, 0) : GRID_TO Exchange(x, y, z, s-1, 2, 0, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 2, 0) : GRID_TO Exchange(x, y, z, s, 2, 0, 0, 0)

RW GRID_CD_0_1 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 0, 1) : GRID_TO Exchange(x, y, z, s-1, 0, 1, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 0, 1) : GRID_TO Exchange(x, y, z, s, 0, 1, 0, 0)

RW GRID_CD_1_1 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 1, 1) : GRID_TO Exchange(x, y, z, s-1, 1, 1, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 1, 1) : GRID_TO Exchange(x, y, z, s, 1, 1, 0, 0)

RW GRID_CD_2_1 <- (s==0) ? INITIAL_GRID FillGrid(x, y, z, 2, 1) : GRID_TO Exchange(x, y, z, s-1, 2, 1, 2, 1)
    -> (s==number_of_steps-1) ? FINAL_GRID WriteBack(x, y, z, 2, 1) : GRID_TO Exchange(x, y, z, s, 2, 1, 0, 0)

CTL X <- (s!=0) ? X LBM_STEP(x, y, z, s-1)
    -> (s!=number_of_steps-1) ? X LBM_STEP(x, y, z, s+1)


BODY [type=CUDA]
    double *subgrid[PROBLEM_C][PROBLEM_D];
    subgrid[0][0] = GRID_CD_0_0;
    subgrid[1][0] = GRID_CD_1_0;
    subgrid[2][0] = GRID_CD_2_0;
    subgrid[0][1] = GRID_CD_0_1;
    subgrid[1][1] = GRID_CD_1_1;
    subgrid[2][1] = GRID_CD_2_1;

    printf("[Process %d] kernel LBM_STEP (%d %d %d %d) grid|0][0]=%p, grid[1][0]=%p, grid[2][0]=%p, grid[0][1]=%p, grid[1][1]=%p, grid[2][1]=%p\n",
                rank, x, y, z, s, subgrid[0][0], subgrid[1][0], subgrid[2][0], subgrid[0][1], subgrid[1][1], subgrid[2][1]);
END



Exchange(x, y, z, s, conservative, direction, dimension, side)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
s = 0 .. number_of_steps-2
conservative = 0 .. conservatives_number-1
direction = 0 .. directions_number-1
dimension = 0 .. 3-1
side = 0 .. 1
//side = %{ return conservative; %}

// name of the paper : Extending the PTG paradigm to run efficient high-order stencil codes

: descGridDC(x, y, z, conservative, direction)

//READ GRID_FROM <- GRID_CD_0_0 LBM_STEP(x, y, z, s)



/*
<- (conservative==0 && direction==0)
        ? ((dimension==0 && side==0) ? GRID_CD_0_0 LBM_STEP(x, y, z, s)
        : GRID_TO Exchange(x, y, z, conservative, direction, (side==0)?
        (dimension-1):(dimension), (side+1)%2))
*/

/*
    -> (conservative==0 && direction==0)
        ? (((dimension==2 && side==1) ? GRID_CD_0_0 LBM_STEP(x, y, z, s+1))
        : (GRID_TO Exchange(x, y, z, conservative, direction, (side==1)?(dimension+1):(dimension), (side+1)%2)))
*/

RW GRID_TO
    <- (conservative==0 && direction==0 && dimension==0 && side==0) ? GRID_CD_0_0 LBM_STEP(x, y, z, s)
    <- (conservative==0 && direction==0 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)
    <- (conservative==1 && direction==0 && dimension==0 && side==0) ? GRID_CD_1_0 LBM_STEP(x, y, z, s)
    <- (conservative==1 && direction==0 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)
    <- (conservative==2 && direction==0 && dimension==0 && side==0) ? GRID_CD_2_0 LBM_STEP(x, y, z, s)
    <- (conservative==2 && direction==0 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)
    <- (conservative==0 && direction==1 && dimension==0 && side==0) ? GRID_CD_0_1 LBM_STEP(x, y, z, s)
    <- (conservative==0 && direction==1 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)
    <- (conservative==1 && direction==1 && dimension==0 && side==0) ? GRID_CD_1_1 LBM_STEP(x, y, z, s)
    <- (conservative==1 && direction==1 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)
    <- (conservative==2 && direction==1 && dimension==0 && side==0) ? GRID_CD_2_1 LBM_STEP(x, y, z, s)
    <- (conservative==2 && direction==1 && !(dimension==0 && side==0)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==0)?(dimension-1):(dimension)), (side+1)%2)

    -> (conservative==0 && direction==0 && dimension==2 && side==1) ? GRID_CD_0_0 LBM_STEP(x, y, z, s+1)
    -> (conservative==0 && direction==0 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)
    -> (conservative==1 && direction==0 && dimension==2 && side==1) ? GRID_CD_1_0 LBM_STEP(x, y, z, s+1)
    -> (conservative==1 && direction==0 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)
    -> (conservative==2 && direction==0 && dimension==2 && side==1) ? GRID_CD_2_0 LBM_STEP(x, y, z, s+1)
    -> (conservative==2 && direction==0 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)
    -> (conservative==0 && direction==1 && dimension==2 && side==1) ? GRID_CD_0_1 LBM_STEP(x, y, z, s+1)
    -> (conservative==0 && direction==1 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)
    -> (conservative==1 && direction==1 && dimension==2 && side==1) ? GRID_CD_1_1 LBM_STEP(x, y, z, s+1)
    -> (conservative==1 && direction==1 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)
    -> (conservative==2 && direction==1 && dimension==2 && side==1) ? GRID_CD_2_1 LBM_STEP(x, y, z, s+1)
    -> (conservative==2 && direction==1 && !(dimension==2 && side==1)) ? GRID_TO Exchange(x, y, z, s, conservative, direction, ((side==1)?(dimension+1):(dimension)), (side+1)%2)


BODY [type=CUDA]
    printf("[Process %d] kernel Exchange (%d %d %d %d %d %d %d %d) grid_to=%p\n",
                rank, x, y, z, s, conservative, direction, dimension, side, GRID_TO);
END

WriteBack(x, y, z, c, d)

x = 0 .. subgrid_number_x-1
y = 0 .. subgrid_number_y-1
z = 0 .. subgrid_number_z-1
c = 0 .. conservatives_number-1
d = 0 .. directions_number-1

: descGridDC(x, y, z, c, d)

RW FINAL_GRID <- (c==0 && d==0) ? GRID_CD_0_0 LBM_STEP(x, y, z, number_of_steps-1)
    <- (c==1 && d==0) ? GRID_CD_1_0 LBM_STEP(x, y, z, number_of_steps-1)
    <- (c==2 && d==0) ? GRID_CD_2_0 LBM_STEP(x, y, z, number_of_steps-1)
    <- (c==0 && d==1) ? GRID_CD_0_1 LBM_STEP(x, y, z, number_of_steps-1)
    <- (c==1 && d==1) ? GRID_CD_1_1 LBM_STEP(x, y, z, number_of_steps-1)
    <- (c==2 && d==1) ? GRID_CD_2_1 LBM_STEP(x, y, z, number_of_steps-1)

    -> descGridDC(x, y, z, c, d)

BODY [type=CUDA]
    printf("[Process %d] kernel WRITE_BACK (%d %d %d %d %d)\n", rank, x, y, z, c, d);
END

extern "C" %{

int main(int argc, char *argv[])
{
    parsec_context_t* parsec;
    int rc;
    int rank, world;
    parsec_LBM_taskpool_t *tp;
    //int mycounter;

    parsec_arena_datatype_t adt;
    parsec_datatype_t otype;

#if defined(PARSEC_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_SERIALIZED, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    world = 1;
    rank = 0;
#endif

    // LBM parameters
    Grid grid = newGrid(rank, world);

    double delta_x = grid.physicalSize[0] / (double)grid.size[0];
    double dt = CFL * delta_x / (ALPHA > BETA ? ALPHA : BETA);

    double tmax = 1;
    int number_of_steps = (int)((tmax-EPSILON) / dt) + 1;
    number_of_steps = 3;

    parsec = parsec_init(-1, &argc, &argv);

    int nodes = world;

    #if defined(PARSEC_HAVE_CUDA)
    parsec_info_id_t CuHI = parsec_info_register(&parsec_per_stream_infos, "CUBLAS::HANDLE",
                                                 destroy_cublas_handle, NULL,
                                                 create_cublas_handle, NULL,
                                                 NULL);
    assert(CuHI != -1);
#else
    int CuHI = -1;
#endif

    parsec_translate_matrix_type(PARSEC_MATRIX_DOUBLE, &otype);
    parsec_add2arena_rect(&adt, otype,
                                 TILE_SIZE_X, TILE_SIZE_Y*TILE_SIZE_Z*PROBLEM_C*PROBLEM_D, TILE_SIZE_X);

    tp = (parsec_LBM_taskpool_t*)parsec_LBM_new(
                                grid.desc,
                                rank, world,
                                SUBGRID_NUMBER_X, SUBGRID_NUMBER_Y, SUBGRID_NUMBER_Z,
                                TILE_SIZE_X, TILE_SIZE_Y, TILE_SIZE_Z, PROBLEM_C, PROBLEM_D,
                                OVERLAP_X, OVERLAP_Y, OVERLAP_Z,
                                number_of_steps,
                                CuHI);

    assert( NULL != tp );
    tp->arenas_datatypes[PARSEC_LBM_DEFAULT_ADT_IDX] = adt;
    PARSEC_OBJ_RETAIN(adt.arena);

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");
    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");
    rc = parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

printf("final : %f\n", ((double*)(grid.desc[0].grid))[0]);


    parsec_taskpool_free(&tp->super);

    for(int i=0;i<PROBLEM_DC;++i)
    {
        parsec_data_free(grid.desc[i].grid);
        parsec_grid_destroy(&grid.desc[i]);
    }

    parsec_fini(&parsec);
#if defined(PARSEC_HAVE_MPI)
    MPI_Finalize();
#endif

    return 0;
}

%}